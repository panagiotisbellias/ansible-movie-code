---
- name: install django app
  hosts: all

  vars:
    app_dir: "{{user_dir}}/e-movies-app"
    git_repo_url: "https://github.com/panagiotisbellias/e-movies-app.git"
    git_repo_branch: "main"

  tasks:

  - name: print user_dir
    debug:
        msg: "user dir is {{user_dir}}"

  - name: Run whoami without become.
    command: whoami
    changed_when: false
    become: false
    register: whoami

  - name: Set a fact with the user name.
    set_fact:
        login_user: "{{ whoami.stdout }}"

  - name: print user name
    debug:
        msg: "login user is {{login_user}}"

  - name: ensure github.com is a known host
    lineinfile:
        dest: "{{user_dir}}/.ssh/known_hosts"
        create: yes
        state: present
        line: "{{lookup('pipe', 'ssh-keyscan -t rsa github.com')}}"
        regexp: "^github\\.com"

  - name: clone django project
    git:
        repo: "{{git_repo_url}}"
        version: "{{git_repo_branch}}"
        clone: yes
        force: yes
        dest: "{{app_dir}}"
    changed_when: true

  - name: copy env file
    shell: "cp {{app_dir}}/movies_app/movies_app/.env.example {{app_dir}}/movies_app/movies_app/.env"

  - name: populate ~/.env secret key
    lineinfile:
        dest: "{{app_dir}}/movies_app/movies_app/.env"
        state: present
        regexp: "^SECRET_KEY="
        line: "SECRET_KEY='{{SECRET_KEY}}'"

  - name: populate ~/.env db url
    lineinfile:
        dest: "{{app_dir}}/movies_app/movies_app/.env"
        state: present
        regexp: "^DATABASE_URL="
        line: "DATABASE_URL='{{DATABASE_URL}}'"

  - name: populate ~/.env allowed hosts
    lineinfile:
        dest: "{{app_dir}}/movies_app/movies_app/.env"
        state: present
        regexp: "^ALLOWED_HOSTS="
        line: "ALLOWED_HOSTS='{{ALLOWED_HOSTS}}'"

  - name: populate ~/.env email user
    lineinfile:
        dest: "{{app_dir}}/movies_app/movies_app/.env"
        state: present
        regexp: "^EMAIL_USER="
        line: "EMAIL_USER='{{EMAIL_USER}}'"

  - name: populate ~/.env email pass
    lineinfile:
        dest: "{{app_dir}}/movies_app/movies_app/.env"
        state: present
        regexp: "^EMAIL_PASSWD="
        line: "EMAIL_PASSWD='{{EMAIL_PASSWD}}'"

  - name: populate ~/.env debug var
    lineinfile:
        dest: "{{app_dir}}/movies_app/movies_app/.env"
        state: present
        regexp: "^DEBUG="
        line: "DEBUG='{{DEBUG}}'"

  - name: install and activate virtual environment
    block:
    - name: setup virtual environment
      pip:
        requirements: "{{app_dir}}/requirements.txt"
        virtualenv: "{{app_dir}}/myvenv"
        virtualenv_python: python3
    rescue:
    - name: "APT - install misc packages"
      apt:
        name: [python3, python3-pip, python3-virtualenv, virtualenv]
        update_cache: yes
      become: yes
      become_user: root
      when: hostvars[inventory_hostname].ansible_distribution == 'Ubuntu'
    always:

    - name: setup virtual environment
      pip:
        requirements: "{{app_dir}}/requirements.txt"
        virtualenv: "{{app_dir}}/myvenv"
        virtualenv_python: python3

    - name: make migrations
      django_manage:
        command: "makemigrations"
        app_path: "{{app_dir}}/movies_app"
        virtualenv: "{{app_dir}}/myvenv"

    - name: migrate
      django_manage:
        command: "migrate"
        app_path: "{{app_dir}}/movies_app"
        virtualenv: "{{app_dir}}/myvenv"

    - name: copy django service file
      template:
        src: ../files/django/gunicorn.service.j2
        dest: "/etc/systemd/system/gunicorn.service"
      become: yes
      become_user: root
      
    - name: ensure gunicorn service started
      service: 
        name: gunicorn
        state: started
        enabled: yes
      become: yes


  - name: install and configure nginx
    block:

    - name: "APT - install nginx"
      apt:
        name: nginx
        update_cache: yes

    - name: copy nginx conf file
      template:
        src: ../files/nginx/demo.nginx.j2
        dest: "/etc/nginx/sites-available/django"

    - name: copy nginx https conf file
      template:
        src: ../files/nginx/demo.https.nginx.j2
        dest: "/etc/nginx/sites-available/djangossl"

    - name: copy certificates
      copy:
        src: "{{item}}"
        dest: /etc/ssl/private/
      with_items:
        - ../files/certs/django/server.crt
        - ../files/certs/django/server.key
  
    - name: enable django site in nginx
      file:
        src: "/etc/nginx/sites-available/django"
        dest: "/etc/nginx/sites-enabled/django"
        state: link
      notify: restart nginx

    - name: enable djangossl site in nginx
      file:
        src: "/etc/nginx/sites-available/djangossl"
        dest: "/etc/nginx/sites-enabled/djangossl"
        state: link
      notify: restart nginx

    - name: de-activate default nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: restart nginx
    
    become: yes
    become_user: root

  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted
      become: yes

    - name: restart gunicorn
      service:
        name: gunicorn
        state: restarted
      become: yes